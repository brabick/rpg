Key:
# means task is done
{} elaborates thoughts about the current task
--> detailing how the task was completed


Next steps for program (in no order):

#Add the ability to choose pokemon for both sides.
-->You can choose your mon, the opposing mon is chosen at random

#Expand type chart and super effective calc. Must include all types and and immunities.
{
    I'm thinking we can just assign the multiplier in damage calc a value of 0, .25, .5, 1, 2 or 4
    based on effectiveness
}
-->Now I need to figure out how to assign super effectiveness when there is more than one type.  I think I will just
-->multiply the multipliers

Expand type chart to be able to take in two types
-->The first part of this is done. I have one for loop that I can go through twice, once for each type.

#Move mon, attack and player lists all to another file that is read and updated separately
-->Moved and updated function file to reflect change in location.

Add effects and more variability in attacks * This is going to be difficult

Add more pokemon
{
    Has to be done after type chart has been updated
}

Being able to switch mons in the middle of a battle
{
    Seems longer term as well, might require a database. And another custom attack like fainted
}

Build an interface (long term project)

#Figure out how to make it so that a mirror match has two different sets of hp(!important!)
-->I created another instance of each pokemon with two different lists.  This fixes this issue.

#Make information more accessable (wait statements?) Print turn over?
-->Prints a random statement at the end of each turn that helps to break up the battle

#Print when an attack is super effective!
-->Added

#Make the battle flow and have the next pokemon sent out when one faints.
-->After one of your pokemon faints, it is removed from the list and you are asked to enter the name of you next pokemon.
  This goes until the list is empty.  With the opponent, after their pokemon faints they send out another random pokemon
  from the list.  This works but the turn doesn't stop if a pokemon faints.  The incoming pokemon then uses the attack
  that is then performed by that pokemon.

#Create attack called faint that is perfomed when a pokemon faints. This will override the attack text.
--> Works well. Adjusted if statement for damage calc and print battle dmg so that a specific line is
--> printed and no damage is done

#Reorganize main game turns such as:
    while (game not over):
        turn1()
        if (game is over):
            break
        turn2()

    if (you won):
        print("You won!")
    else:
        print("You suck!")
-->Abe completed this

Implement STAB and critical hits